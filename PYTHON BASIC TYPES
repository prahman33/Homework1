#List Comprehensions
if __name__ == '__main__':
    x = int(input())
    y = int(input())
    z = int(input())
    n = int(input())
    print([ [i, j, k] for i in range(x+1) for j in range(y+1) for k in range(z+1) if i+j+k!=n] )



#Find the Runner-Up Score
if __name__ == '__main__':
    n = int(input())
    arr = map(int, input().split())
arr = list(arr)
print(max([i for i in arr if i!=max(arr)]))




#lists
if __name__ == '__main__':
    N = int(input())
    arr = []
    for _ in range(N):
        command = input().split()
        if command[0] == "insert":
            arr.insert(int(command[1]), int(command[2]))
        elif command[0] == "print":
            print(arr)
        elif command[0] == "remove":
            arr.remove(int(command[1]))
        elif command[0] == "append":
            arr.append(int(command[1]))
        elif command[0] == "sort":
            arr.sort()
        elif command[0] == "pop":
            arr.pop()
        elif command[0] == "reverse":
            arr.reverse()
            
            
  #Nested lists          
  if __name__ == '__main__':
    records = []
    names_of_second_lowest = []
    scores = []
    for _ in range(int(input())):
        name = input()
        score = float(input())
        scores.append(score)
        records.append([name, score])
    sorted_scores = sorted(set(scores), reverse=True)
    second_lowest_score = sorted_scores[-2]

    for student in records:
        if student[1] == second_lowest_score:
            names_of_second_lowest.append(student[0])
   
    print(*sorted(names_of_second_lowest), sep="\n")



#Finding the percentage
if __name__ == '__main__':
    n = int(input())
    student_marks = {}
    for _ in range(n):
        name, *line = input().split()
        scores = list(map(float, line))
        student_marks[name] = scores
    query_name = input()
print(f"{sum(student_marks[query_name])/3:.2f}")
